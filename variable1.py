# 자료형의 값을 저장하는 공간 변수

# 변수는 어떻게 만들까?
a = 1
b = 'python'
c = [1, 2, 3]
# 변수를 만들때는 위 예처럼 =(assignment) 기호를 사용한다
# 다른 프로그래밍 언어인 C나 JAVA에서는 변수를 만들 때 자료형을 직접 지정해야 한다
# 하지만 파이썬은 변수에 저장된 값을 스스로 판단하여 자료형을 지정하기 때문에 더 편리하다
# ( 변수이름 = 변수에 저장할 값 )

# 변수란?
# 파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다
# 객체란 우리가 지금껏 보아온 자료형과 같은 것을 의미하는 말이다
a = [1, 2, 3]
# 만약 위 코드처럼 a = [1, 2, 3]이라고 하면 [1, 2, 3] 값을 가지는 리스트 자료형(객체)이 자동으로 메모리에 생성되고
# 변수 a는 [1, 2, 3] 리스트가 저장된 메모리의 주소를 가리키게 된다
# (메모리란 컴퓨터가 프로그램에서 사용하는 데이터를 기억하는 공간이다)
#
# a 변수가 가리키는 메모리의 주소는 다음과 같이 확인할 수 있다
id(a)
# 4303029896
# id 함수는 변수가 가리키고 있는 객체의 주소 값을 돌려주는 파이썬 내장 함수이다

# 리스트를 복사하고자 할떄
a = [1, 2, 3]
b = a
# b 변수에 a 변수를 대입하면 어떻게 될까? b와 a는 같은걸까 다른걸까? 결론부터 말하면 b는 a와 완전히 동일하다고 할 수 있다
# 다만 [1, 2, 3] 리스트를 참조하는 변수가 a 변수 1개에서 b 변수가 추가되어 2개로 늘어났다는 차이만 있을 뿐이다
# id 함수를 사용하면 이러한 사실을 확인할 수 있다
id(a)
# 4303029896
id(b)
# 4303029896
# id(a)의 값이 id(b)의 값과 동일함을 확인할 수 있다
# 즉 a가 가리키는 대상과 b가 가리키는 대상이 동일하다는 것을 알 수 있다
# 동일한 객체를 가리키고 있는지에 대해서 판단하는 파이썬 명령어 'is'를 다음과 같이 실행해도 역시 참(True)을 돌려준다
a is b # a와 b가 가리키는 객체는 동일한가?
# True

a[1] = 4
a
# [1, 4, 3]
b
# [1, 4, 3]
# a 리스트의 두번째 요소를 값 4로 바꾸었더니 a만 바뀌는 것이 아니라 b도 똑같이 바뀌었다
# 그 이유는 앞에서 살펴본 것처럼 a, b 모두 동일한 리스트를 가리키고 있기 때문이다

# 그렇다면 b 변수를 생성할 때 a 변수의 값을 가져오면서 a와는 다른 주소를 가리키도록 만들 수는 없을까?
# 1. [:] 이용 (리스트 전체를 가리키는 [:]을 사용해서 복사하는 방법)
a = [1, 2, 3]
b = a[:]
a[1] = 4
a
# [1, 4, 3]
b
# [1, 2, 3]
# 위 예에서 볼 수 있듯이 a 리스트 값을 바꾸더라도 b 리스트에는 영향을 끼치지 않는다

# 2. copy 모듈 이용
from copy import copy
b = copy(a)
# 위 예에서 b = copy(a)는 b = a[:]와 동일하다
# 두 변수가 같은 값을 가지면서 다른 객체를 제대로 생성했는지 다음과 같이 확인해보자
b is a
# False
# 위 예에서 b is a가 False를 돌려주므로 b와 a가 가리키는 객체는 서로 다르다는것을 알 수 있다

# 변수를 만드는 여러가지 방법
a, b = ('python', 'life')
# 튜플로 a, b에 값을 대입할 수 있다 아래와 동일하다
(a, b) = 'python', 'life'
# 튜플은 괄호를 생략해도 된다

# 리스트로 변수를 만들 수도 있다
[a, b] = ['python', 'life']

# 또한 여러 개의 변수에 같은 값을 대입할 수도 있다
a = b = 'python'
# 파이썬에서는 위 방법을 사용하여 두 변수의 값을 아주 간단히 바꿀 수 있다
a = 3
b = 5
a, b = b, a
a
# 5
b
# 3

